name: CI/CD Complete - Build & Deploy Automatique

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Déclenchement manuel

env:
  REGISTRY_NAME: acr2048game
  IMAGE_NAME: 2048-game
  WEBAPP_NAME: webapp-2048-game-aya

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚚 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Generate version tag
      id: version
      run: |
        VERSION="v${{ github.run_number }}-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📋 Version générée: $VERSION"
        
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: 🔐 Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ env.REGISTRY_NAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: ✅ Build completed
      run: |
        echo "🎉 Image Docker créée avec succès!"
        echo "📦 Image latest: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
        echo "📦 Image versionnée: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        
    - name: 🚀 Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        
    - name: ⏳ Wait for deployment
      run: |
        echo "⏳ Attente de la finalisation du déploiement..."
        sleep 45
        
    - name: 🧪 Test deployment
      run: |
        echo "🧪 Test de l'application déployée..."
        
        # Test avec retry
        MAX_ATTEMPTS=5
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "🔍 Tentative $ATTEMPT/$MAX_ATTEMPTS..."
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.WEBAPP_NAME }}.azurewebsites.net --max-time 30 || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Application accessible! (HTTP $HTTP_STATUS)"
            break
          else
            echo "⏳ En attente... (HTTP $HTTP_STATUS)"
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "⚠️ L'application pourrait encore être en cours de démarrage"
            else
              sleep 30
            fi
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
        done
        
    - name: 📊 Deployment Summary
      run: |
        echo "🎉 DÉPLOIEMENT TERMINÉ AVEC SUCCÈS!"
        echo "=================================="
        echo "📦 Image déployée: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        echo "🌐 URL de l'application: https://${{ env.WEBAPP_NAME }}.azurewebsites.net"
        echo "🏷️ Version: ${{ steps.version.outputs.version }}"
        echo "📅 Déployé le: $(date)"
        echo "📋 Commit: ${{ github.sha }}"
        echo "👤 Par: ${{ github.actor }}"
        echo ""
        echo "🎮 Votre jeu 2048 est maintenant en ligne!"